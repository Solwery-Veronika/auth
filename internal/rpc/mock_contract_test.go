// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	model "github.com/Solwery-Veronika/auth/internal/model"
	user "github.com/Solwery-Veronika/user/pkg/user"
	gomock "github.com/golang/mock/gomock"
)

// MockDbRepo is a mock of DbRepo interface.
type MockDbRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepoMockRecorder
}

// MockDbRepoMockRecorder is the mock recorder for MockDbRepo.
type MockDbRepoMockRecorder struct {
	mock *MockDbRepo
}

// NewMockDbRepo creates a new mock instance.
func NewMockDbRepo(ctrl *gomock.Controller) *MockDbRepo {
	mock := &MockDbRepo{ctrl: ctrl}
	mock.recorder = &MockDbRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepo) EXPECT() *MockDbRepoMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockDbRepo) LoginUser(ctx context.Context, username, email, password string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, username, email, password)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockDbRepoMockRecorder) LoginUser(ctx, username, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockDbRepo)(nil).LoginUser), ctx, username, email, password)
}

// SignupUser mocks base method.
func (m *MockDbRepo) SignupUser(ctx context.Context, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignupUser indicates an expected call of SignupUser.
func (mr *MockDbRepoMockRecorder) SignupUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupUser", reflect.TypeOf((*MockDbRepo)(nil).SignupUser), ctx, username, password)
}

// MockUserC is a mock of UserC interface.
type MockUserC struct {
	ctrl     *gomock.Controller
	recorder *MockUserCMockRecorder
}

// MockUserCMockRecorder is the mock recorder for MockUserC.
type MockUserCMockRecorder struct {
	mock *MockUserC
}

// NewMockUserC creates a new mock instance.
func NewMockUserC(ctrl *gomock.Controller) *MockUserC {
	mock := &MockUserC{ctrl: ctrl}
	mock.recorder = &MockUserCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserC) EXPECT() *MockUserCMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserC) CreateUser(ctx context.Context, data model.CreateUserData) (*user.CreateUserOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(*user.CreateUserOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserCMockRecorder) CreateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserC)(nil).CreateUser), ctx, data)
}
